'comment': 'Adds a number of preprocessor rules to Fortran grammar.'
'scopeName': 'source.fortran.preprocessor'
'fileTypes': []
'injectionSelector': 'source.fortran - ( string | comment )'
'patterns': [
  {
    'begin': '^\\s*(#)'
    'beginCaptures':
      '1': 'name': 'keyword.preprocessor.indicator.fortran'
    'end': '\\n'
    'patterns':[
      {'include': '#preprocessor-conditional'}
      {'include': '#preprocessor-define'}
      {'include': '#preprocessor-error'}
      {'include': '#preprocessor-include'}
      {'include': '#preprocessor-pragma'}
    ]
  }
]
'repository':
  'preprocessor-conditional':
    'patterns':[
      {
        'begin': '(?i)\\G\\s*\\b(if)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.preprocessor.if.fortran'
        'end': '(?=\\n)'
        'patterns':[
          {'include': '#preprocessor-constant'}
          {'include': '#preprocessor-defined'}
        ]
      }
      {
        'begin': '(?i)\\G\\s*\\b(ifdef)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.preprocessor.ifdef.fortran'
        'end': '(?=\\n)'
        'patterns':[
          {'include': '#preprocessor-constant'}
        ]
      }
      {
        'begin': '(?i)\\G\\s*\\b(ifndef)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.preprocessor.ifndef.fortran'
        'end': '(?=\\n)'
        'patterns':[
          {'include': '#preprocessor-constant'}
        ]
      }
      {
        'begin': '(?i)\\G\\s*\\b(else)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.preprocessor.else.fortran'
        'end': '(?=\\n)'
        'patterns':[
          {'include': '#preprocessor-constant'}
        ]
      }
      {
        'begin': '(?i)\\G\\s*\\b(elif)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.preprocessor.elif.fortran'
        'end': '(?=\\n)'
        'patterns':[
          {'include': '#preprocessor-constant'}
          {'include': '#preprocessor-defined'}
        ]
      }
      {
        'match': '(?i)\\G\\s*\\b(endif)\\b'
        'captures':
          '1': 'name': 'keyword.preprocessor.endif.fortran'
      }
    ]
  'preprocessor-constant':
    'patterns':[
      {
        'comment': 'Numeric constants'
        'name': 'constant.numeric.fortran'
        'match': '(?ix)[\\+\\-]?(\\b\\d+\\.?\\d*|\\.\\d+)
          (_\\w+|d[\\+\\-]?\\d+|e[\\+\\-]?\\d+(_\\w+)?)?(?![a-z_])'
      }
    ]
  'preprocessor-define':
    'name': 'meta.statement.define.preprocessor.fortran'
    'begin': '(?i)\\G\\s*\\b(define)\\b'
    'beginCaptures':
      '1': 'name': 'keyword.define.preprocessor.fortran'
    'end': '(?=\\n)'
    'patterns':[
      {'include': '#preprocessor-line-continuation-operator'}
    ]
  'preprocessor-defined':
    'match': '(?i)\\b(defined)\\b'
    'captures':
      '1': 'name': 'keyword.define.preprocessor.fortran'
  'preprocessor-error':
    'begin': '(?i)\\G\\s*(error)\\b'
    'beginCaptures':
      '1': 'name': 'keyword.error.preprocessor.fortran'
    'end': '(?=\\n)'
    'patterns': [
      {'include': '#preprocessor-string'}
    ]
  'preprocessor-include':
    'begin': '(?i)\\G\\s*(include)\\b'
    'beginCaptures':
      '1': 'name': 'keyword.include.preprocessor.fortran'
    'end': '(?=\\n)'
    'patterns': [
      {'include': '#preprocessor-string'}
      {
        'name': 'string.quoted.other.lt-gt.include.preprocessor.fortran'
        'begin': '<'
        'beginCaptures':
          '0': 'name': 'punctuation.definition.string.begin.preprocessor.fortran'
        'end': '>'
        'endCaptures':
          '0': 'name': 'punctuation.definition.string.end.preprocessor.fortran'
      }
    ]
  'preprocessor-line-continuation-operator':
    'begin': '\\s*(\\\\)'
    'beginCaptures':
      '1': 'name': 'keyword.operator.line-continuation.preprocessor.fortran'
    'end': '(?i)^'
  'preprocessor-pragma':
    'name': 'meta.statement.pragma.preprocessor.fortran'
    'begin': '(?i)\\G\\s*\\b(pragma)\\b'
    'beginCaptures':
      '1': 'name': 'keyword.pragma.preprocessor.fortran'
    'end': '(?=\\n)'
  'preprocessor-string':
    'name': 'string.quoted.double.include.preprocessor.fortran'
    'begin': '"'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.preprocessor.fortran'
    'end': '"'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.preprocessor.fortran'
