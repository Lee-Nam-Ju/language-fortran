'comment': 'Specificities of Fortran >= 90'
'fileTypes': [
  'f90'
  'F90'
  'f95'
  'F95'
  'f03'
  'F03'
  'f08'
  'F08'
]
'firstLineMatch': '(?i)-[*]- mode: f90 -[*]-'
'name': 'Fortran - Modern'
'injections':
  'source.fortran - ( meta | comments | string )':
    'patterns':[
      {'include': '#module-definition'}
    ]
  'source.fortran string':
    'patterns':[
      {'include': '#string-line-continuation'}
    ]
  'source.fortran - ( string | comment | meta.line-continuation )':
    'patterns':[
      {'include': '#comments'}
      {'include': '#operators'}
      {'include': '#line-continuation'}
      {'include': '#derived-type-definition'}
      {'include': '#interface-blocks'}
      {'include': '#class-specification'}
      {'include': '#procedure-specification'}
      {'include': '#type-specification'}
      {'include': '#intrinsic-functions'}
      {'include': '#intrinsic-subroutines'}
      {'include': '#named-construct'}
      {'include': '#control-constructs'}
      {
        'comment': 'Non-intrinsic subroutines.'
        'begin': '(?<=call|%)\\s+([a-z]\\w*)\\s*\\('
        'end': '\\)'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {'include': '#control-statements'}
      {'include': '#data-statements'}
      {'include': '#IO-statements'}
      {'include': '#include-statement'}
      {'include': '#where-statement'}
      {
        'comment': 'Use statement. Introduced in the Fortran 1990 standard.'
        'match': '(?i)(?:^|(?<=;))\\s*\\b(use)\\b'
        'name': 'keyword.control.fortran.modern'
      }
      {'include': '#intent-attributes'}
      {'include': '#type-attributes'}
      {'include': '#procedure-attributes'}
      {'include': '#access-attributes'}
      {'include': '#bind-attribute'}
    ]
  'meta.function.fortran meta.first-line.function':
    'patterns':[
      {'include': '#result-statement'}
    ]
'patterns': [
  {'include': 'source.fortran'}
]
'repository':
  # attributes:
  'access-attributes':
    {
      'comment': 'Introduced in the Fortran 1990 standard.'
      'name': 'storage.modifier.fortran.modern'
      'match': '(?i)(^|(?<=[;,]))\\s*\\b(private|public)\\b'
    }
  'bind-attribute':
    {
      'comment': 'Introduced in Fortran 2003 standard.'
      'begin': '(?i)(?:^|(?<=[;,]))\\s*\\b(bind)\\s*\\('
      'beginCaptures':
        '1': 'name': 'storage.modifier.fortran.modern'
      'end': '(?:\\)|(?=\\n))'
      'patterns':[
        {
          'name': 'variable.parameter.fortran'
          'match': '(?i)\\b(c)\\b'
        }
        {'include': '#dummy-variable'}
        {'include': '$self'}
      ]
    }
  'intent-attributes':
    {
      'comment': 'Introduced in the Fortran 1990 standard.'
      'match': '(?ix)(?:^|(?<=[;,]))\\s*\\b(intent)\\s*\\(\\s*
        (?:(in|out|in\\s*out)|((?:(?!\\s*\\))[^\\)])*))\\s*\\)'
      'captures':
        '1': 'name': 'storage.modifier.fortran.modern'
        '2': 'name': 'storage.modifier.fortran.modern'
        '3': 'name': 'invalid.error.fortran.modern'
    }
  'procedure-attributes':
    'comment': 'Attributes proceeding procedure specifications.'
    'patterns':[
      {
        'comment': 'Introduced in the Fortran 1990 standard.'
        'match': '(?i)\\b(elemental|pure|recursive)\\b'
        'name': 'storage.modifier.fortran.modern'
      }
      {
        'comment': 'Introduced in the Fortran 2003 standard.'
        'match': '(?i)\\b(module)\\b'
        'name': 'storage.modifier.fortran.modern'
      }
      {
        'comment': 'Introduced in the Fortran 2008 standard.'
        'match': '(?i)\\b(impure)\\b'
        'name': 'storage.modifier.fortran.modern'
      }
    ]
  'type-attributes':
    'patterns':[
      {
        'comment': 'Introduced in the Fortran 1990 standard.'
        'match': '(?i)(?:^|(?<=[;,]))\\s*\\b(allocatable|optional|pointer|target)\\b'
        'name': 'storage.modifier.fortran.modern'
      }
      {
        'comment': 'Introduced in the Fortran 2003 standard.'
        'match': '(?i)(?:^|(?<=[;,]))\\s*\\b(asynchronous|protected|value|volatile)\\b'
        'name': 'storage.modifier.fortran.modern'
      }
      {
        'comment': 'Introduced in the Fortran 2008 standard.'
        'match': '(?i)(?:^|(?<=[;,]))\\s*\\b(contiguous)\\b'
        'name': 'storage.modifier.fortran.modern'
      }
    ]
  # comments:
  'comments':
    'name': 'comment.line.fortran.modern'
    'begin': '!'
    'end': '(?=\\n)'
  'operators':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'patterns':[
      {
        'comment': 'logical operators in symbolic format'
        'match': '(\\=\\=|\\/\\=|\\>\\=|\\>|\\<|\\<\\=)'
        'name': 'keyword.operator.logical.fortran.modern'
      }
      {
        'comment': 'operators'
        'match': '(\\%|\\=\\>)'
        'name': 'keyword.operator.fortran.modern'
      }
    ]
  'line-continuation':
    'comment': 'Operator that allows a line to be continued on the next line.'
    'contentName': 'meta.line-continuation.fortran.modern'
    'begin': '\\s*(&)'
    'beginCaptures':
      '1': 'name': 'keyword.operator.line-continuation.fortran.modern'
    'end': '(?i)^(?:(?=\\s*[^\\s!&])|\\s*(&))'
    'endCaptures':
      '1': 'name': 'keyword.operator.line-continuation.fortran.modern'
    'patterns':[
      {'include': '#comments'}
      {
        'name': 'invalid.error.fortran.modern'
        'match': '\\S[^!]*'
      }
    ]
  'string-line-continuation':
    'comment': 'Operator that allows a line to be continued on the next line.'
    'begin': '(&)(?=\\s*\\n)'
    'beginCaptures':
      '1': 'name': 'keyword.operator.line-continuation.fortran.modern'
    'end': '(?i)^(?:(?=\\s*[^\\s!&])|\\s*(&))'
    'endCaptures':
      '1': 'name': 'keyword.operator.line-continuation.fortran.modern'
    'patterns':[
      {'include': '#comments'}
      {
        'name': 'invalid.error.fortran.modern'
        'match': '\\S.*'
      }
    ]
  # interfaces:
  'interface-blocks':
    'patterns':[
      {'include': '#abstract-interface-block'}
      {'include': '#assignment-interface-block'}
      {'include': '#operator-interface-block'}
      {'include': '#IO-interface-block'}
      {'include': '#explicit-interface-block'}
      {'include': '#generic-interface-block'}
    ]
  'abstract-interface-block':
    'comment': 'Introduced in the Fortran 2003 standard.'
    'begin': '(?i)^\\s*(abstract)(?:\\s+(interface))?\\b\\s*([^;!\\n]*)?'
    'beginCaptures':
      '1': 'name': 'keyword.other.attribute.fortran.modern'
      '2': 'name': 'support.function.interface.fortran.modern'
      '3': 'name': 'invalid.error.fortran'
    'end': '(?i)^\\s*(end)(?:\\s*(interface))?\\b\\s*([^;!\\n]*)?'
    'endCaptures':
      '1': 'name': 'keyword.control.end.fortran.modern'
      '2': 'name': 'support.function.interface.fortran.modern'
      '3': 'name': 'invalid.error.fortran'
    'patterns': [
      {'include': '$self'}
    ]
  'assignment-interface-block':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'begin': '(?i)^\\s*(interface)\\s+(assignment)(?:\\s*\\(\\s*(=)?\\s*\\))?\\s*([^;!\\n]+)?'
    'beginCaptures':
      '1': 'name': 'support.function.interface.fortran.modern'
      '2': 'name': 'keyword.other.operator.fortran.modern'
      '3': 'name': 'keyword.operator.fortran.modern'
      '4': 'name': 'invalid.error.fortran'
    'end': '(?i)^\\s*(end)(?:\\s*(interface)\\b(?:\\s+(assignment)\\b(?:\\s*\\(\\s*(\\3)\\s*\\))?)?)?\\s*([^;!\\n]+)?'
    'endCaptures':
      '1': 'name': 'keyword.control.end.fortran.modern'
      '2': 'name': 'support.function.interface.fortran.modern'
      '3': 'name': 'keyword.other.operator.fortran.modern'
      '4': 'name': 'keyword.operator.fortran.modern'
      '5': 'name': 'invalid.error.fortran'
    'patterns':[
      {'include': '#interface-body'}
    ]
  'explicit-interface-block':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'begin': '(?i)^\\s*(interface)\\s*(?=[;!\\n])'
    'beginCaptures':
      '1': 'name': 'support.function.interface.fortran.modern'
    'end': '(?i)^\\s*(end)(\\s*interface)?\\b\\s*([^;!\\n]+)?'
    'endCaptures':
      '1': 'name': 'keyword.control.end.fortran.modern'
      '2': 'name': 'support.function.interface.fortran.modern'
      '3': 'name': 'invalid.error.fortran'
    'patterns':[
      {'include': '#interface-body'}
    ]
  'generic-interface-block':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'begin': '(?i)^\\s*(interface)\\s+([a-z]\\w*)\\b\\s*([^;!\\n]+)?'
    'beginCaptures':
      '1': 'name': 'support.function.interface.fortran.modern'
      '2': 'name': 'entity.name.function.fortran'
      '3': 'name': 'invalid.error.fortran'
    'end': '(?i)^\\s*(end)(?:\\s*(interface)(?:\\s+(\\2))?)?\\b\\s*([^;!\\n]+)?'
    'endCaptures':
      '1': 'name': 'keyword.control.end.fortran.modern'
      '2': 'name': 'support.function.interface.fortran.modern'
      '3': 'name': 'entity.name.function.fortran'
      '4': 'name': 'invalid.error.fortran'
    'patterns':[
      {'include': '#interface-body'}
    ]
  'IO-interface-block':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'begin': '(?i)^\\s*(interface)\\s+(read|write)(?:\\s*\\(\\s*((?:un)?formatted)?\\s*\\))?\\s*([^;!\\n]+)?'
    'beginCaptures':
      '1': 'name': 'support.function.interface.fortran.modern'
      '2': 'name': 'keyword.other.operator.fortran.modern'
      '3': 'name': 'keyword.operator.fortran.modern'
      '4': 'name': 'invalid.error.fortran'
    'end': '(?i)^\\s*(end)\\s*(?:(interface)\\b(?:\\s+(\\2)\\b(?:\\s*\\(\\s*(\\3)?\\s*\\))?)?)?\\s*([^;!\\n]+)?'
    'endCaptures':
      '1': 'name': 'keyword.control.end.fortran.modern'
      '2': 'name': 'support.function.interface.fortran.modern'
      '3': 'name': 'keyword.other.operator.fortran.modern'
      '4': 'name': 'keyword.operator.fortran.modern'
      '5': 'name': 'invalid.error.fortran'
    'patterns':[
      {'include': '#interface-body'}
    ]
  'operator-interface-block':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'begin': '(?i)^\\s*(interface)\\s+(operator)\\b(?:\\s*\\(\\s*(\\.[a-z]+\\.|\\+|\\-|\\*\\*?|\\/[\\/\\=]?|[\\<\\>]\\=?|\\=\\=)?\\s*\\))?\\s*([^;!\\n]+)?'
    'beginCaptures':
      '1': 'name': 'support.function.interface.fortran.modern'
      '2': 'name': 'keyword.other.operator.fortran.modern'
      '3': 'name': 'keyword.operator.fortran.modern'
      '4': 'name': 'invalid.error.fortran'
    'end': '(?i)^\\s*(end)\\s*(?:(interface)\\b(?:\\s+(operator)\\b(?:\\s*\\(\\s*(\\3)?\\s*\\))?)?)?\\s*([^;!\\n]+)?'
    'endCaptures':
      '1': 'name': 'keyword.control.end.fortran.modern'
      '2': 'name': 'support.function.interface.fortran.modern'
      '3': 'name': 'keyword.other.operator.fortran.modern'
      '4': 'name': 'keyword.operator.fortran.modern'
      '5': 'name': 'invalid.error.fortran'
    'patterns':[
      {'include': '#interface-body'}
    ]
  'interface-body':
    'patterns':[
      {'include': '$self'}
      {'include': '#module-procedure-statement'}
      {'include': '#procedure-statement'}
    ]
  'procedure-statement':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'begin': '(?i)(?:\\G|^)\\s*\\b(procedure)\\b(\\s*::)?'
    'beginCaptures':
      '1': 'name': 'support.function.procedure.fortran.modern'
      '2': 'name': 'keyword.operator.fortran.modern'
    'end': '(?i)(?=[;!\\n])'
    'patterns':[
      {
        'match': '(?i)(?:\\G|(,))\\s*\\b([a-z]\\w*)\\b'
        'captures':
          '1': 'name': 'punctuation.separator.comma.fortran'
          '2': 'name': 'entity.name.function.procedure.fortran'
      }
    ]
  'module-procedure-statement':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'begin': '(?ix)(?:^|(?<=;))\\s*\\b(module)\\b(?!\\s*(elemental|function
      |impure|module|pure|recursive|subroutine)\\b)'
    'beginCaptures':
      '1': 'name': 'keyword.other.module.fortran.modern'
    'end': '(?i)(?=[;!\\n])'
    'patterns':[
      {'include': '#procedure-statement'}
    ]
  # intrinsic procedures:
  'intrinsic-functions':
    'patterns':[
      {
        'comment': 'Intrinsic functions introduced in the Fortran 2008 standard.'
        'begin': '(?ix)\\b(acosh|asinh|atanh|bge|bgt|ble|blt|dshiftl|dshiftr|
          findloc|hypot|iall|iany|image_index|iparity|is_contiguous|lcobound|
          leadz|mask[lr]|merge_bits|norm2|num_images|parity|popcnt|poppar|
          shift[alr]|storage_size|this_image|trailz|ucobound)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.function.intrinsic.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Functions accessable through the intrinsic FORTRAN_SPECIAL_FUNCTIONS module. Introduced in the Fortran 2008 standard.'
        'begin': '(?ix)\\b(bessel_[jy][01n]|erf(c(_scaled)?)?|gamma|log_gamma)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.function.intrinsic.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Intrinsic functions introduced in the Fortran 2003 standard.'
        'begin': '(?ix)\\b(command_argument_count|extends_type_of|is_iostat_end|
          is_iostat_eor|new_line|same_type_as|selected_char_kind)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.function.intrinsic.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Functions accessable through the intrinsic IEEE_ARITHMETIC module. Introduced in the Fortran 2003 standard.'
        'begin': '(?ix)\\b(ieee_(
          class|copy_sign|is_(finite|nan|negative|normal)|logb|next_after|rem|
          rint|scalb|selected_real_kind|
          support_(datatype|denormal|divide|inf|io|nan|rounding|sqrt|standard|underflow_control)|
          unordered|value))\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.function.intrinsic.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Functions accessable through the intrinsic IEEE_EXCEPTIONS module. Introduced in the Fortran 2003 standard.'
        'begin': '(?ix)\\b(ieee_support_(flag|halting))\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.function.intrinsic.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Functions accessable through the intrinsic ISO_C_BINDING module. Introduced in the Fortran 2003 standard.'
        'begin': '(?ix)\\b(c_(associated|funloc|loc|sizeof))\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.function.intrinsic.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Functions accessable through the intrinsic ISO_FORTRAN_ENV module. Introduced in the Fortran 2003 standard.'
        'begin': '(?ix)\\b(compiler_(options|version))\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.function.intrinsic.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Intrinsic functions introduced in the Fortran 1995 standard.'
        'begin': '(?ix)\\b(null)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.function.intrinsic.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Intrinsic functions introduced in the Fortran 1990 standard.'
        'begin': '(?ix)\\b(achar|adjustl|adjustr|all|allocated|associated|any|bit_size|
          btest|ceiling|count|cshift|digits|dot_product|eoshift|epsilon|exponent|
          floor|fraction|huge|iachar|iand|ibclr|ibits|ibset|ieor|ior|ishftc?|
          kind|lbound|len_trim|logical|matmul|maxexponent|maxloc|maxval|merge|
          minexponent|minloc|minval|modulo|nearest|not|pack|precision|present|
          product|radix|range|repeat|reshape|rrspacing|scale|scan|
          selected_(int|real)_kind|set_exponent|shape|size|spacing|spread|sum|
          tiny|transfer|transpose|trim|ubound|unpack|verify)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.function.intrinsic.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
    ]
  'intrinsic-subroutines':
    'patterns':[
      {
        'comment': 'Intrinsic subroutines introduced in the Fortran 2008 standard.'
        'begin': '(?ix)(?<=call)\\s+(execute_command_line|get_command|
          get_command_argument|get_environment_variable|move_alloc)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.subroutine.intrinsic.fortran.modern'
        'end': '\\)'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Intrinsic subroutines introduced in the Fortran 1995 standard.'
        'begin': '(?i)(?<=call)\\s+(cpu_time)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.subroutine.intrinsic.fortran.modern'
        'end': '\\)'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Intrinsic subroutines introduced in the Fortran 1990 standard.'
        'begin': '(?ix)(?<=call)\\s+(date_and_time|mvbits|random_number|random_seed|
          system_clock)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.subroutine.intrinsic.fortran.modern'
        'end': '\\)'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Subroutines accessable through the intrinsic IEEE_ARITHMETIC module. Introduced in the Fortran 2003 standard.'
        'begin': '(?i)(?<=call)\\s+(ieee_(get|set)_(rounding|underflow)_mode)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.subroutine.intrinsic.fortran.modern'
        'end': '\\)'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Subroutines accessable through the intrinsic IEEE_EXCEPTIONS module. Introduced in the Fortran 2003 standard.'
        'begin': '(?i)(?<=call)\\s+(ieee_(get|set)_(flag|halting_mode|status))\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.subroutine.intrinsic.fortran.modern'
        'end': '\\)'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Subroutines accessable through the intrinsic ISO_C_BINDING module. Introduced in the Fortran 2003 standard.'
        'begin': '(?i)(?<=call)\\s+(c_f_(pointer|procpointer))\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.other.subroutine.intrinsic.fortran.modern'
        'end': '\\)'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
    ]
  # statements:
  'control-statements':
    {
      'comment': 'Introduced in the Fortran 1990 standard.'
      'contentName': 'meta.control-statement.fortran.modern'
      'begin': '(?i)\\b(cycle|exit)\\b'
      'beginCaptures':
        '1': 'name': 'keyword.control.fortran.modern'
      'end': '(?=[;!\\n])'
      'patterns':[

      ]
    }
  'data-statements':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'patterns':[
      {
        'begin': '(?ix)\\b(allocate|deallocate|nullify)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.control.data.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
    ]
  'IO-statements':
    'patterns':[
      {
        'comment': 'Introduced in the Fortran 1990 standard.'
        'begin': '(?i)\\b(namelist)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.control.IO.fortran.modern'
        'end': '(?=\\n)'
        'patterns':[
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Introduced in the Fortran 2003 standard.'
        'begin': '(?i)\\b(flush|wait)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.control.IO.fortran.modern'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
    ]
  'include-statement':
    {
      'comment': 'Introduced in the Fortran 1990 standard.'
      'name': 'meta.include.fortran.modern'
      'begin': '(?i)(?:^|(?<=;))\\s*(include)\\b'
      'beginCaptures':
        '1': 'name': 'keyword.control.include.fortran.modern'
      'end': '(?=[;!\\n])'
      'patterns':[
        {
          'comment': 'Show error for anything but a string constant.'
          'match': '\\s*([^\\s"\'].*)(?=[;!\\n])'
          'captures':
            '1': 'name': 'invalid.error.fortran.modern'
        }
        {'include': '$self'}
      ]
    }
  'where-statement':
    {
      'comment': 'Single line where introduced in the Fortran 1990 standard.'
      'match': '(?i)(?:^|(?<=;))\\s*\\b((end\\s*)?where)\\b'
      'name': 'keyword.control.fortran.modern'
    }
  # definitions:
  'module-definition':
    'comment': 'Introduced in the Fortran 1990 standard.'
    'name': 'meta.module.fortran.modern'
    'begin': '(?ix)(?:^|(?<=;))\\s*(module)\\s+(?!(?:elemental|function|impure|module
      |pure|recursive|subroutine)\\b)([a-z]\\w*)\\b'
    'beginCaptures':
      '1': 'name': 'keyword.other.module.fortran.open'
    'end': '(?ix)(?:^|(?<=;))\\s*(end)(?:\\s*(module)(?:\\s+(\\2))?)?\\b\\s*([^;!\\n]+)?
      (?=\\s*[;!\\n])'
    'endCaptures':
      '1': 'name': 'keyword.other.end.module.fortran'
      '2': 'name': 'keyword.other.module.fortran'
      '3': 'name': 'entity.name.module.fortran'
      '4': 'name': 'invalid.error.fortran'
    'applyEndPatternLast': 1
    'patterns': [
      {'include': '$self'}
      {'include': '#access-attributes'}
    ]
  'derived-type-definition':
    'name': 'meta.derived-type.definition.fortran.modern'
    'begin': '(?i)^\\s*(type)\\b(?!\\s*(\\(|is\\b))'
    'beginCaptures':
      '1': 'name': 'support.type.derived-type.fortran.modern'
    'end': '(?=[;!\\n])'
    'applyEndPatternLast': 1
    'patterns': [
      {# attribute list
        'comment': 'derived-type attribute list'
        'contentName': 'meta.attribute-list.fortran.modern'
        'begin': '\\G(?=\\s*(,|::))'
        'end': '(?i)(::)|(?=[;!\\n])'
        'endCaptures':
          '1': 'name': 'keyword.operator.double-colon.fortran'
        'patterns': [
          {'include': '#access-attributes'}
          {'include': '#bind-attribute'}
          {
            'begin': '(?i)(?<=,)\\s*\\b(extends)\\s*\\('
            'beginCaptures':
              '1': 'name': 'keyword.other.attribute.derived-type.fortran.modern'
            'end': '\\)'
            'patterns':[
              {
                'name': 'entity.name.derived-type.fortran.modern'
                'match': '(?i)\\b([a-z]\\w*)\\b'
              }
            ]
          }
          {
            'name': 'keyword.other.attribute.derived-type.fortran.modern'
            'match': '(?i)(?<=,)\\s*\\b(abstract)\\b'
          }
          {
            'name': 'invalid.error.fortran'
            'match': '(?i)\\b\\w+\\b'
          }
        ]
      }
      {# body
        'begin': '(?i)\\b([a-z]\\w*)\\b'
        'beginCaptures':
          '1': 'name': 'entity.name.derived-type.fortran.modern'
        'end': '(?i)^\\s*(end)\\s*(type)(?:\\s+(?:(\\1)|(\\w+)))?\\b'
        'endCaptures':
          '1': 'name': 'keyword.control.end.derived-type.fortran.modern'
          '2': 'name': 'support.type.derived-type.fortran.modern'
          '3': 'name': 'entity.name.derived-type.fortran.modern'
          '4': 'name': 'invalid.error.fortran.modern'
        'patterns':[
          {'include': '#dummy-variable-list'}
          {# parameter definition statements
            'match': '(?i)^\\s*(integer)\\s*(,)\\s*(kind|len)\\s*(?:(::)\\s*([a-z]\\w*)?)?\\s*(?=[;!\\n])'
            'captures':
              '1': 'name': 'storage.type.integer.fortran'
              '2': 'name': 'punctuation.comma.fortran'
              '3': 'name': 'keyword.other.attribute.derived-type.parameter.fortran.modern'
              '4': 'name': 'keyword.operator.double-colon.fortran'
              '5': 'name': 'entity.name.derived-type.parameter.fortran.modern'
          }
          {'include': '$self'}
          {# contains section
            'comment': 'derived-type contains construct'
            'begin': '(?i)^\\s*(contains)(?=\\s*[!$\\n])'
            'beginCaptures':
              '1': 'name': 'keyword.type-contains.fortran.modern'
            'end': '(?i)(?=\\s+end\\b)'
            'patterns': [
              {# generic procedure statement
                'begin': '(?i)^\\s*(generic)\\b'
                'beginCaptures':
                  '1': 'name': 'support.function.generic.type-bound.fortran.modern'
                'end': '(?=[;!\\n])'
                'patterns':[
                  {# attribute list
                    'comment': 'derived-type attribute list'
                    'begin': '(?i)(?<=generic)'
                    'end': '(?i)(::)|(?=[a-z]|[;!\\n])'
                    'endCaptures':
                      '1': 'name': 'keyword.operator.double-colon.fortran'
                    'patterns': [
                      {
                        'begin': '(?i)(,)'
                        'beginCaptures':
                          '1': 'name': 'punctuation.comma.fortran'
                        'end': '(?=::|[,;!\\n])'
                        'patterns':[
                          {'include': '#access-attributes'}
                        ]
                      }
                    ]
                  }
                  {# assignment
                    'comment': 'type bound procedure binding name'
                    'match': '(?i)(?<=generic|::)\\s*\\b(assignment)\\s*\\(\\s*(\\=)\\s*\\)'
                    'captures':
                      '1': 'name': 'keyword.other.assignment.fortran.modern'
                      '2': 'name': 'keyword.operator.fortran.modern'
                  }
                  {# operator
                    'comment': 'type bound procedure binding name'
                    'match': '(?i)(?<=generic|::)\\s*\\b(operator)\\s*\\(\\s*(\\.[a-z]*\\.|\\=\\=|\\>\\=|\\<\\=|\\/\\=|\\>|\\<)\\s*\\)'
                    'captures':
                      '1': 'name': 'keyword.other.assignment.fortran.modern'
                      '2': 'name': 'keyword.operator.fortran.modern'
                  }
                  {# binding list
                    'begin': '\\=\\>'
                    'beginCaptures':
                      '0': 'name': 'keyword.operator.pointer.fortran.modern'
                    'end': '(?=[;!\\n])'
                    'patterns':[
                      {
                        'name': 'entity.name.function.procedure.fortran.modern'
                        'match': '(?i)\\b[a-z]\\w*\\b'
                      }
                    ]
                  }
                ]
              }
              {# procedure statement
                'comment': 'type bound procedure statement'
                'begin': '(?i)^\\s*(procedure)\\b(?:\\s*\\(([a-z]\\w*)\\))?'
                'beginCaptures':
                  '1': 'name': 'support.function.procedure.type-bound.fortran.modern'
                  '2': 'name': 'entity.name.function.procedure.fortran.modern'
                'end': '(?i)(?=[;!$\\n])'
                'patterns':[
                  {# attribute list
                    'comment': 'derived-type attribute list'
                    'begin': '(?i)(?<=procedure|\\))\\b(?!\\s*\\()'
                    'end': '(?i)(::)|(?=[a-z]|[;!\\n])'
                    'endCaptures':
                      '1': 'name': 'keyword.operator.double-colon.fortran'
                    'patterns': [
                      {
                        'begin': '(?i)(,)'
                        'beginCaptures':
                          '1': 'name': 'punctuation.comma.fortran'
                        'end': '(?=::|[,;!\\n])'
                        'patterns':[
                          {'include': '#access-attributes'}
                          {
                            'match': '(?i)\\b(pass)\\b\\s*(?:\\(\\s*([a-z]\\w*)\\s*\\))?(?!([^;!\\n](?!::))*(nopass|pass))'
                            'captures':
                              '1': 'name': 'keyword.other.attribute.procedure.fortran.modern'
                              '2': 'name': 'keyword.other.attribute.procedure.fortran.modern'
                            'end': '(?=[,:;!\\n])'
                          }
                          {
                            'name': 'keyword.other.attribute.procedure.fortran.modern'
                            'match': '(?i)\\b(nopass)\\b(?!([^;!\\n](?!::))*(nopass|pass))'
                          }
                          {
                            'name': 'keyword.other.attribute.procedure.fortran.modern'
                            'match': '(?i)\\b(deferred|non_overridable)\\b(?!([^;!\\n](?!::))*(deferred|non_overridable))'
                          }
                          {
                            'name': 'invalid.error.fortran'
                            'match': '(?i)\\b\\w+\\b'
                          }
                        ]
                      }
                    ]
                  }
                  {# binding name
                    'comment': 'type bound procedure binding name'
                    'match': '(?i)(?<=procedure|::)\\s*\\b([a-z]\\w*\\b)(?:\\s*(\\=\\>)(?:\\s*([a-z]\\w*\\b))?)?'
                    'captures':
                      '1': 'name': 'entity.name.function.procedure.fortran.modern'
                      '2': 'name': 'keyword.other.operator.fortran.modern'
                      '3': 'name': 'entity.name.function.procedure.fortran.modern'
                  }
                ]
              }
              {'include': '$self'}
            ]
          }
        ]
      }
    ]
  # specifications:
  'type-specification':
    {
      'comment': 'Introduced in the Fortran 1990 standard.'
      'name': 'meta.specification.type.fortran'
      'begin': '(?i)(?:^|\\G|(?<=[;a-z]))\\s*\\b(type)\\b(?=\\s*\\()'
      'beginCaptures':
        '1': 'name': 'storage.type.fortran.modern'
      'end': '(?=[\\);!\\n])'
      'patterns': [
        {'include': '$self'}
      ]
    }
  'class-specification':
    {
      'comment': 'Introduced in the Fortran 2003 standard.'
      'name': 'meta.specification.class.fortran'
      'begin': '(?i)(?:^|(?<=;))\\s*\\b(class)\\b(?=\\s*\\()'
      'beginCaptures':
        '1': 'name': 'storage.type.fortran.modern'
      'end': '(?=[;!\\n])'
      'patterns': [
        {'include': '$self'}
      ]
    }
  'procedure-specification':
    {
      'comment': 'Introduced in the Fortran 2003 standard.'
      'name': 'meta.specification.procedure.fortran.modern'
      'begin': '(?ix)(?:^|\\G|(?<=[;a-z]))\\s*\\b(procedure)\\b'
      'beginCaptures':
        '1': 'name': 'storage.type.fortran'
      'end': '(?i)(?=[;!\\n])'
      'patterns': [
        {
          'begin': '\\G\\s*(\\()'
          'beginCaptures':
            '1': 'name': 'punctuation.definition.parameters.begin.fortran'
          'end': '(\\)|(?=\\n))'
          'endCaptures':
            '0': 'name': 'punctuation.definition.parameters.end.fortran'
          'patterns': [
            {'include': '$self'}
            {'include': '#type-specification'}
            {
              'comment': 'Procedure name.'
              'name': 'entity.name.function.fortran'
              'match': '\\G\\s*([a-z]\\w*)'
            }
          ]
        }
        {
          'meta.attribute-list.procedure.fortran.modern'
          'begin': '(?=,)'
          'end': '(?=::|[;!\\n])'
          'patterns':[
            {'include': '$self'}
          ]
        }
        {
          'comment': 'list of procedure names and generic procedure names'
          'contentName': 'meta.procedure-name-list.fortran.modern'
          'begin': '(?i)(?=\\s*[a-z])'
          'end': '(?=[;!\\n])'
          'patterns':[
            {
              'comment': 'procedure name'
              'match': '(?i)(?<=procedure|,|::|\\=\\>)\\s*\\b([a-z]\\w*)\\b'
              'captures':
                '1': 'name': 'entity.name.function.procedure.fortran.modern'
            }
            {'include': '$self'}
          ]
        }
        {'include': '$self'}
      ]
    }
  # control constructs:
  'named-construct':
    {
      'comment': 'Introduced in the Fortran 1990 standard.'
      'contentName': 'meta.named-construct.fortran.modern'
      'begin': '(?ix)(?:^|(?<=;))\\s*([a-z]\\w*)\\s*(:)
        (?=\\s*(?:associate|block(?!\\s*data)|critical|do|forall|if|select|where)\\b)'
      # 'beginCaptures':
      #   '1': 'name': 'constant.numeric.construct-name.fortran.modern'
      'end': '(?i)\\b(?:\\s*\\b(\\1)\\b)?(?:\\s*([^\\s;!][^;!\\n]*?))?(?=\\s*[;!\\n])'
      'endCaptures':
        # '1': 'name': 'constant.numeric.construct-name.fortran.modern'
        '2': 'name': 'invalid.error.fortran.modern'
      'applyEndPatternLast': 1
      'patterns':[
        {'include': '$self'}
      ]
    }
  'control-constructs':
    'patterns':[
      {'include': '#associate-construct'}
      {'include': '#block-construct'}
      {'include': '#critical-construct'}
      {'include': '#do-construct'}
      {'include': '#forall-construct'}
      {'include': '#select-case-construct'}
      {'include': '#select-type-construct'}
      {'include': '#where-construct'}
      {
        'comment': 'Do concurrent construct. Introduced in the Fortran 2008 standard.'
        'match': '(?i)\\b(?<=do)\\s+(concurrent)\\b'
        'name': 'keyword.control.fortran.modern'
      }
    ]
  'associate-construct':
    {
      'comment': 'Introduced in the Fortran 2003 standard.'
      'contentName': 'meta.associate.fortran'
      'begin': '(?i)(?:^|\\G(?<=:)|(?<=;))\\s*(associate)\\b(?=\\s*\\()'
      'beginCaptures':
        '1': 'name': 'keyword.control.associate.fortran'
      'end': '(?i)(?:^|(?<=;))\\s*(end\\s*associate)\\b'
      'endCaptures':
        '1': 'name': 'keyword.control.endassociate.fortran'
        '2': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns':[
        {'include': '$self'}
      ]
    }
  'block-construct':
    {
      'comment': 'Introduced in the Fortran 2008 standard.'
      'contentName': 'meta.block.fortran'
      'begin': '(?i)(?:^|\\G(?<=:)|(?<=;))\\s*(block)\\b\\s*(?!data)([^\\s;!][^;!\\n]*)?(?=[;!\\n])'
      'beginCaptures':
        '1': 'name': 'keyword.control.associate.fortran'
        '2': 'name': 'invalid.error.fortran'
      'end': '(?i)(?:^|(?<=;))\\s*(end\\s*block)\\b'
      'endCaptures':
        '1': 'name': 'keyword.control.endassociate.fortran'
        '2': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns':[
        {'include': '$self'}
      ]
    }
  'critical-construct':
    {
      'comment': 'Introduced in the Fortran 2008 standard.'
      'contentName': 'meta.block.fortran'
      'begin': '(?i)(?:^|\\G(?<=:)|(?<=;))\\s*(critical)\\b([^\\s;!][^;!\\n]*)?(?=[;!\\n])'
      'beginCaptures':
        '1': 'name': 'keyword.control.associate.fortran'
        '2': 'name': 'invalid.error.fortran'
      'end': '(?i)(?:^|(?<=;))\\s*(end\\s*critical)\\b'
      'endCaptures':
        '1': 'name': 'keyword.control.endassociate.fortran'
        '2': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns':[
        {'include': '$self'}
      ]
    }
  'do-construct':
    'patterns':[
      {
        'comment': 'Introduced in the Fortran 1977 standard.'
        'name': 'meta.do.labeled.fortran'
        'begin': '(?i)(?:^|\\G(?<=:)|(?<=[;\\d]))\\s*(do)\\s+(\\d{1,5})\\b'
        'beginCaptures':
          '1': 'name': 'keyword.control.do.fortran'
          '2': 'name': 'constant.numeric.fortran'
        'end': '(?i)^(?=\\s*\\2\\b)'
        'patterns':[
          {'include': '#do-modifiers'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'Introduced in the Fortran 1995 standard.'
        'contentName': 'meta.do.unlabeled.fortran'
        'begin': '(?i)(?:^|\\G(?<=:)|(?<=[;\\d]))\\s*(do)\\b(?!\\s+\\d)'
        'beginCaptures':
          '1': 'name': 'keyword.control.do.fortran'
          '2': 'name': 'constant.numeric.fortran'
        'end': '(?i)^\\s*(?:(continue)|(end\\s*do))\\b'
        'endCaptures':
          '1': 'name': 'keyword.control.continue.fortran'
          '2': 'name': 'keyword.control.enddo.fortran'
        'patterns':[
          {'include': '#do-modifiers'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'For matching enddo statements at then end of labeled do
          constructs.'
        'match': '(?i)(?<=\\d)\\b\\s+\\b(end\\s*do)\\b'
        'captures':
          '1': 'name': 'keyword.control.enddo.fortran'
      }
    ]
  'do-modifiers':
    'patterns':[
      {
        'comment': 'Introduced in the Fortran 2003 standard.'
        'name': 'keyword.control.do.concurrent.fortran'
        'match': '(?i)\\b(concurrent)\\b'
      }
      {
        'comment': 'Introduced in the Fortran 1995 standard.'
        'name': 'keyword.control.do.while.fortran'
        'match': '(?i)\\b(while)\\b'
      }
    ]
  'forall-construct':
    {
      'comment': 'Introduced in the Fortran 1995 standard.'
      'contentName': 'meta.forall.fortran'
      'begin': '(?i)(?:^|\\G(?<=:)|(?<=;))\\s*(forall)\\b'
      'beginCaptures':
        '1': 'name': 'keyword.control.forall.fortran'
      'end': '(?i)(?:^|(?<=;))\\s*(end\\s*forall)\\b'
      'endCaptures':
        '1': 'name': 'keyword.control.endforall.fortran'
        '2': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns':[
        {'include': '$self'}
      ]
    }
  'select-case-construct':
    {
      'comment': 'Introduced in the Fortran 1990 standard.'
      'contentName': 'meta.select.case.fortran'
      'begin': '(?i)(?:^|\\G(?<=:)|(?<=;))\\s*(select)\\s+(case)\\b'
      'beginCaptures':
        '1': 'name': 'keyword.control.select.fortran'
        '2': 'name': 'keyword.control.case.fortran'
      'end': '(?i)(?:^|(?<=;))\\s*(end\\s*select)\\b'
      'endCaptures':
        '1': 'name': 'keyword.control.endselect.fortran'
        '2': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns':[
        {
          'name': 'keyword.control.fortran.modern'
          'match': '(?i)(?:^|(?<=;))\\s*case(\\s+default)?\\b'
        }
        {'include': '$self'}
      ]
    }
  'select-type-construct':
    {
      'comment': 'Introduced in the Fortran 2003 standard.'
      'contentName': 'meta.select.type.fortran'
      'begin': '(?i)(?:^|\\G(?<=:)|(?<=;))\\s*(select)\\s+(type)\\b'
      'beginCaptures':
        '1': 'name': 'keyword.control.select.fortran'
        '2': 'name': 'keyword.control.type.fortran'
      'end': '(?i)(?:^|(?<=;))\\s*(end\\s*select)\\b'
      'endCaptures':
        '1': 'name': 'keyword.control.endselect.fortran'
        '2': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns':[
        {
          'name': 'keyword.control.fortran.modern'
          'match': '(?i)(?:^|(?<=;))\\s*\\b(class|type)\\s+is\\b'
        }
        {'include': '$self'}
      ]
    }
  'where-construct':
    {
      'comment': 'Introduced in the Fortran 1990 standard.'
      'contentName': 'meta.where.fortran'
      'begin': '(?i)(?:^|\\G(?<=:)|(?<=;))\\s*(where)\\b(?!\\s*\\(.*\\)\\s*[a-z])'
      'beginCaptures':
        '1': 'name': 'keyword.control.where.fortran'
      'end': '(?i)(?:^|(?<=;))\\s*(end\\s*where)\\b'
      'endCaptures':
        '1': 'name': 'keyword.control.endwhere.fortran'
        '2': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns':[
        {
          'name': 'keyword.control.fortran.modern'
          'match': '(?i)(?:^|(?<=;))\\s*\\b(else\\s*where)\\b'
        }
        {'include': '$self'}
      ]
    }
  # other:
  'result-statement':
    {
      'begin': '(?i)\\s+(result)\\s*\\('
      'beginCaptures':
        '1': 'name': 'keyword.other.result.fortran.modern'
      'end': '(?:\\)|(?=[!;\\n]))'
      'patterns':[
        {'include': '#dummy-variable-list'}
      ]
    }
  'dummy-variable-list':
    {
      'begin': '\\G\\s*(\\()'
      'beginCaptures':
        '1': 'name': 'punctuation.definition.parameters.begin.fortran'
      'end': '(\\)|(?=\\n))'
      'endCaptures':
        '0': 'name': 'punctuation.definition.parameters.end.fortran'
      'patterns': [
        {'include': '#dummy-variable'}
      ]
    }
  'dummy-variable':
    {
      'comment': 'dummy variable'
      'match': '(?i)(?:^|(?<=[&,\\(]))\\s*([a-z]\\w*)'
      'captures':
        '1': 'name': 'variable.parameter.fortran'
    }
  'procedure-call-dummy-variable':
    'name': 'variable.parameter.dummy-variable.fortran.modern'
    'match': '(?i)(?<=[\\,\\(])\\s*([a-z]\\w*)(?=\\s*\\=)'
'scopeName': 'source.fortran.modern'
