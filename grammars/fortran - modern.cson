'comment': 'Specificities of Fortran >= 90'
'fileTypes': [
  'f90'
  'F90'
  'f95'
  'F95'
  'f03'
  'F03'
  'f08'
  'F08'
]
'firstLineMatch': '(?i)-[*]- mode: f90 -[*]-'
'name': 'Fortran - Modern'
'patterns': [
  {
    'include': 'source.fortran'
  }
  {
    'begin': '(?i)^\\s*(interface)\\s+(operator|assignment)\\(((\\.[a-z0-9_]+\\.)|[\\+\\-\\=\\/\\*]+)\\)'
    'beginCaptures':
      '1':
        'name': 'storage.type.function.fortran'
      '2':
        'name': 'storage.type.fortran'
      '3':
        'name': 'keyword.operator.fortran'
    'comment': 'Interface declaration of operator/assignments'
    'end': '(?i)(end)\\s*(interface)?'
    'endCaptures':
      '1':
        'name': 'keyword.other.fortran'
      '2':
        'name': 'storage.type.function.fortran'
    'name': 'meta.function.interface.operator.fortran.modern'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '(?i)^\\s*(interface)\\s+([a-z]\\w*)'
    'beginCaptures':
      '1':
        'name': 'storage.type.function.fortran'
      '2':
        'name': 'entity.name.function.fortran'
    'comment': 'Interface declaration of function/subroutines'
    'end': '(?i)(end)\\s*(interface)?'
    'endCaptures':
      '1':
        'name': 'keyword.other.fortran'
      '2':
        'name': 'storage.type.function.fortran'
    'name': 'meta.function.interface.fortran.modern'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '(?i)^\\s*(type)\\s+([a-z]\\w*)'
    'beginCaptures':
      '1':
        'name': 'storage.type.fortran.modern'
      '2':
        'name': 'entity.name.type.fortran.modern'
    'comment': 'Type definition'
    'end': '(?i)(end)\\s*(?:(type)(\\s+[a-z]\\w*)?)'
    'endCaptures':
      '1':
        'name': 'keyword.other.fortran'
      '2':
        'name': 'storage.type.fortran.modern'
      '3':
        'name': 'entity.name.type.end.fortran.modern'
    'name': 'meta.type-definition.fortran.modern'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '(^[ \\t]+)?(?=!-)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.ruby'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '!-'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.fortran'
        'end': '\\n'
        'name': 'comment.line.exclamation.mark.fortran.modern'
        'patterns': [
          {
            'match': '\\\\\\s*\\n'
          }
        ]
      }
    ]
  }
  {
    'begin': '(^[ \\t]+)?(?=!)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.ruby'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '!'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.fortran'
        'end': '\\n'
        'name': 'comment.line.exclamation.fortran.modern'
        'patterns': [
          {
            'match': '\\\\\\s*\\n'
          }
        ]
      }
    ]
  }
  {
    'comment': 'statements controling the flow of the program'
    'match': '(?i)\\b(select\\s+case|case(\\s+default)?|end\\s+select|use|(end\\s+)?forall)\\b'
    'name': 'keyword.control.fortran.modern'
  }
  {
    'comment': 'input/output instrinsics'
    'match': '(?i)\\b(access|action|advance|append|apostrophe|asis|blank|delete|delim|direct|end|eor|err|exist|file|fmt|form|formatted|iolength|iostat|keep|name|named|nextrec|new|nml|no|null|number|old|opened|pad|position|quote|read|readwrite|rec|recl|replace|scratch|sequential|size|status|undefined|unformatted|unit|unknown|write|yes|zero|namelist)(?=\\()'
    'name': 'keyword.control.io.fortran.modern'
  }
  {
    'comment': 'logical operators in symbolic format'
    'match': '\\b(\\=\\=|\\/\\=|\\>\\=|\\>|\\<|\\<\\=)\\b'
    'name': 'keyword.operator.logical.fortran.modern'
  }
  {
    'comment': 'operators'
    'match': '(\\%|\\=\\>)'
    'name': 'keyword.operator.fortran.modern'
  }
  {
    'comment': 'numeric instrinsics'
    'match': '(?i)\\b(ceiling|floor|modulo)(?=\\()'
    'name': 'keyword.other.instrinsic.numeric.fortran.modern'
  }
  {
    'comment': 'matrix/vector/array instrinsics'
    'match': '(?i)\\b(allocate|allocated|deallocate)(?=\\()'
    'name': 'keyword.other.instrinsic.array.fortran.modern'
  }
  {
    'comment': 'pointer instrinsics'
    'match': '(?i)\\b(associated)(?=\\()'
    'name': 'keyword.other.instrinsic.pointer.fortran.modern'
  }
  {
    'comment': 'programming units'
    'match': '\\b(?i:((end\\s*)?(interface|procedure|module)))\\b'
    'name': 'keyword.other.programming-units.fortran.modern'
  }
  {
    'begin': '\\b(?i:(type(?=\\s*\\()))\\b(?=.*::)'
    'beginCaptures':
      '1':
        'name': 'storage.type.fortran.modern'
    'comment': 'Line of type specification'
    'end': '(?=!)|$'
    'name': 'meta.specification.fortran.modern'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  }
  {
    'match': '\\b(?i:(type(?=\\s*\\()))\\b'
    'name': 'storage.type.fortran.modern'
  }
  {
    'match': '\\b(?i:(optional|recursive|pointer|allocatable|target|private|public))\\b'
    'name': 'storage.modifier.fortran.modern'
  }
]
'scopeName': 'source.fortran.modern'
