'comment': '?i: has to be added everywhere because fortran is case insensitive; NB: order of matching matters'
'fileTypes': [
  'f'
  'F'
  'f77'
  'F77'
  'for'
  'FOR'
  'fpp'
  'FPP'
]
'name': 'Fortran - Punchcard'
'patterns': [
  {'include': '#preprocessor-rule-enabled'}
  {'include': '#preprocessor-rule-disabled'}
  {'include': '#preprocessor-rule-other'}
  {
    'comment': 'built-in constants'
    'name': 'constant.language.fortran'
    'match': '(?i)\\.(true|false)\\.'
  }
  {
    'comment': 'Numeric constants'
    'name': 'constant.numeric.fortran'
    'match': '(?ix)[\\+\\-]?\\b(\\d+\\.?\\d*|\\.\\d+)(d[\\+\\-]?\\d+|e[\\+\\-]?\\d+(_\\w+)?)?(?![a-z_])'
  }
  {
    'applyEndPatternLast': 1
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.fortran'
    'comment': 'String'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.fortran'
    'name': 'string.quoted.single.fortran'
    'patterns': [
      {
        'match': '\'\''
        'name': 'constant.character.escape.apostrophe.fortran'
      }
    ]
  }
  {
    'applyEndPatternLast': 1
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.fortran'
    'comment': 'String'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.fortran'
    'name': 'string.quoted.double.fortran'
    'patterns': [
      {
        'match': '""'
        'name': 'constant.character.escape.quote.fortran'
      }
    ]
  }
  {
    'comment': 'operators'
    'match': '((?<!\\=)\\=(?!\\=)|\\-|\\+|\\/\\/|\\/|(?!^)\\*|::)'
    'name': 'keyword.operator.fortran'
  }
  {
    'comment': 'logical operators'
    'match': '(?i:(\\.and\\.|\\.or\\.|\\.eq\\.|\\.lt\\.|\\.le\\.|\\.gt\\.|\\.ge\\.|\\.ne\\.|\\.not\\.|\\.eqv\\.|\\.neqv\\.))'
    'name': 'keyword.operator.logical.fortran'
  }
  {'include': '#comments'}
  {'include': '#program-definition'}
  {'include': '#function-definition'}
  {'include': '#subroutine-definition'}
  {'include': '#block-data-definition'}
  {'include': '#do-construct'}
  {'include': '#if-then-construct'}
  {
    'comment': 'Line of type specification'
    'name': 'meta.specification.fortran'
    'begin': '(?ix)(?:^|\\G|(?<=[;a-z]))\\s*\\b(character|complex|double\\s+precision
      |integer|logical|real)\\b'
    'beginCaptures':
      '1': 'name': 'storage.type.fortran'
    'end': '(?i)(?=[a-z;!\\n])'
    'patterns': [
      {'include': '$self'}
      {
        'begin': '\\G\\('
        'end': '\\)'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'begin': '(?=,)'
        'end': '(?=::|[;!\\n])'
        'patterns':[
          {'include': '$self'}
        ]
      }
    ]
  }
  {
    'comment': 'statements controling the flow of the program'
    'match': '\\b(?i:(go\\s*to|assign|to|if|then|else|elseif|end\\s*if|continue|stop|pause|cycle))\\b'
    'name': 'keyword.control.fortran'
  }
  {
    'comment': 'programming units'
    'match': '\\b(?i:(entry|block\\s+data|call|return|contains|include))\\b'
    'name': 'keyword.control.programming-units.fortran'
  }
  {
    'comment': 'data specification'
    'match': '(?i)\\b(assignment|block\\sdata|operator)\\b'
    'name': 'storage.type.fortran'
  }
  {'include': '#intrinsic-functions'}
  {'include': '#IO-statements'}
  {
    'comment': 'data type attributes'
    'match': '\\b(?i:(dimension|common|equivalence|parameter|external|intrinsic|save|data|implicit\\s*none|implicit))\\b'
    'name': 'storage.modifier.fortran'
  }
  {
    'begin': '^\\s*#\\s*(error|warning)\\b'
    'captures':
      '1':
        'name': 'keyword.control.import.error.fortran'
    'end': '$\\n?'
    'name': 'meta.preprocessor.diagnostic.fortran'
    'patterns': [
      {
        'match': '(?>\\\\\\s*\\n)'
        'name': 'punctuation.separator.continuation.fortran'
      }
    ]
  }
  {
    'begin': '^\\s*#\\s*(include|import)\\b\\s+'
    'captures':
      '1':
        'name': 'keyword.control.import.include.fortran'
    'end': '(?=(?://|/\\*))|$\\n?'
    'name': 'meta.preprocessor.fortran.include'
    'patterns': [
      {
        'match': '(?>\\\\\\s*\\n)'
        'name': 'punctuation.separator.continuation.fortran'
      }
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.fortran'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.fortran'
        'name': 'string.quoted.double.include.fortran'
      }
      {
        'begin': '<'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.fortran'
        'end': '>'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.fortran'
        'name': 'string.quoted.other.lt-gt.include.fortran'
      }
    ]
  }
  {'include': '#pragma-mark'}
  {
    'begin': '^\\s*#\\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\\b'
    'captures':
      '1':
        'name': 'keyword.control.import.fortran'
    'end': '(?=(?://|/\\*))|$\\n?'
    'name': 'meta.preprocessor.fortran'
    'patterns': [
      {
        'match': '(?>\\\\\\s*\\n)'
        'name': 'punctuation.separator.continuation.fortran'
      }
    ]
  }
]
'repository':
  'disabled':
    'begin': '^\\s*#\\s*if(n?def)?\\b.*$'
    'comment': 'eat nested preprocessor if(def)s'
    'end': '^\\s*#\\s*endif\\b.*$'
    'patterns': [
      {
        'include': '#disabled'
      }
      {
        'include': '#pragma-mark'
      }
    ]
  'pragma-mark':
    'captures':
      '1':
        'name': 'meta.preprocessor.fortran'
      '2':
        'name': 'keyword.control.import.pragma.fortran'
      '3':
        'name': 'meta.toc-list.pragma-mark.fortran'
    'match': '^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))'
    'name': 'meta.section'
  'preprocessor-rule-disabled':
    'begin': '^\\s*(#(if)\\s+(0)\\b).*'
    'captures':
      '1':
        'name': 'meta.preprocessor.fortran'
      '2':
        'name': 'keyword.control.import.if.fortran'
      '3':
        'name': 'constant.numeric.preprocessor.fortran'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b)'
        'captures':
          '1':
            'name': 'meta.preprocessor.fortran'
          '2':
            'name': 'keyword.control.import.else.fortran'
        'end': '(?=^\\s*#\\s*endif\\b.*$)'
        'patterns': [
          {
            'include': '$base'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b.*$)'
        'name': 'comment.block.preprocessor.if-branch'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled':
    'begin': '^\\s*(#(if)\\s+(0*1)\\b)'
    'captures':
      '1':
        'name': 'meta.preprocessor.fortran'
      '2':
        'name': 'keyword.control.import.if.fortran'
      '3':
        'name': 'constant.numeric.preprocessor.fortran'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b).*'
        'captures':
          '1':
            'name': 'meta.preprocessor.fortran'
          '2':
            'name': 'keyword.control.import.else.fortran'
        'contentName': 'comment.block.preprocessor.else-branch'
        'end': '(?=^\\s*#\\s*endif\\b.*$)'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b.*$)'
        'patterns': [
          {
            'include': '$base'
          }
        ]
      }
    ]
  'preprocessor-rule-other':
    'begin': '^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))'
    'captures':
      '1':
        'name': 'meta.preprocessor.fortran'
      '2':
        'name': 'keyword.control.import.fortran'
    'end': '^\\s*(#\\s*(endif)\\b).*$'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'comments':
    'patterns':[
      {
        'begin': '^[Cc](?=\\b|[Cc])'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.fortran'
        'end': '$\\n?'
        'name': 'comment.line.c.fortran'
        'patterns': [
          {
            'match': '\\\\\\s*\\n'
          }
        ]
      }
      {
        'begin': '^\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.fortran'
        'end': '$\\n?'
        'name': 'comment.line.asterisk.fortran'
        'patterns': [
          {
            'match': '\\\\\\s*\\n'
          }
        ]
      }
    ]
  # definitions:
  'program-definition':
    {
      'comment': 'Program definition construct'
      'name': 'meta.program.fortran'
      'begin': '(?i)(?:^|(?<=;))\\s*\\b(program)\\b\\s+([a-z]\\w*)'
      'beginCaptures':
        '1': 'name': 'keyword.control.program.fortran'
      'end': '(?i)(end)(?:\\s*(\\1)(\\s+\\2)?\\b)?\\s*([^;!\\n]+)?'
      'endCaptures':
        '1': 'name': 'keyword.other.fortran'
        '2': 'name': 'keyword.control.program.fortran'
        '4': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns': [
        {'include': '$self'}
      ]
    }
  'function-definition':
    {
      'comment': 'Function definition construct'
      'name': 'meta.function.fortran'
      'begin': '(?i)(?:^|(?<=;)|\\b(?<!end)\\s)\\s*\\b(function)\\b\\s+([a-z]\\w*)'
      'beginCaptures':
        '1': 'name': 'storage.type.function.fortran'
        '2': 'name': 'entity.name.function.fortran'
      'end': '(?i)(end)(?:\\s*(\\1)(\\s+\\2)?\\b)?\\s*([^;!\\n]+)?'
      'endCaptures':
        '1': 'name': 'keyword.other.end.fortran'
        '2': 'name': 'storage.type.function.fortran'
        '3': 'name': 'entity.name.function.fortran'
        '4': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns': [
        {
          'comment': 'Rest of the first line in function construct.'
          'name': 'meta.first-line.function.fortran'
          'begin': '\\G(?!\\s*[;!\\n])'
          'end': '(?=[;!\\n])'
          'patterns':[
            {'include': '#dummy-variable-list'}
          ]
        }
        {'include': '$self'}
      ]
    }
  'subroutine-definition':
    {
      'comment': 'Subroutine definition construct.'
      'name': 'meta.subroutine.fortran'
      'begin': '(?i)(?:^|(?<=;)|\\b(?<!end)\\s)\\s*\\b(subroutine)\\b\\s+([a-z]\\w*)'
      'beginCaptures':
        '1': 'name': 'storage.type.function.fortran'
        '2': 'name': 'entity.name.function.fortran'
      'end': '(?i)(end)(?:\\s*(\\1)(\\s+\\2)?\\b)?\\s*([^;!\\n]+)?'
      'endCaptures':
        '1': 'name': 'keyword.other.end.fortran'
        '2': 'name': 'storage.type.function.fortran'
        '3': 'name': 'entity.name.function.fortran'
        '4': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns': [
        {
          'comment': 'Rest of the first line in subroutine construct.'
          'name': 'meta.first-line.subroutine.fortran'
          'begin': '\\G(?!\\s*[;!\\n])'
          'end': '(?=[;!\\n])'
          'patterns':[
            {'include': '#dummy-variable-list'}
          ]
        }
        {'include': '$self'}
      ]
    }
  'block-data-definition':
    {
      'comment': 'Block data definition construct.'
      'name': 'meta.subroutine.fortran'
      'begin': '(?i)(?:^|(?<=;)|\\b(?<!end)\\s)\\s*\\b(block\\s*data)\\b\\s+([a-z]\\w*)?'
      'beginCaptures':
        '1': 'name': 'keyword.other.block-data.fortran'
      'end': '(?i)(end)(?:\\s*(\\1)(\\s+\\2)?\\b)?\\s*([^;!\\n]+)?'
      'endCaptures':
        '1': 'name': 'keyword.other.end.fortran'
        '2': 'name': 'keyword.other.block-data.fortran'
        '4': 'name': 'invalid.error.fortran'
      'applyEndPatternLast': 1
      'patterns': [
        {'include': '$self'}
      ]
    }
  # control constructs:
  'do-construct':
    {
      'contentName': 'meta.do.fortran'
      'begin': '(?i)(?:^|(?<=;))\\s*(do)\\b'
      'beginCaptures':
        '1': 'name': 'keyword.control.do.fortran'
      'end': '(?i)(?:^|(?<=;))\\s*(end\\s*do)\\b\\s*(\\S.*)?(?=[;!\\n])'
      'endCaptures':
        '1': 'name': 'keyword.control.enddo.fortran'
        '2': 'name': 'invalid.error.fortran'
      'patterns':[
        {
          'begin': '(?i)\\G\\s*\\b(while)\\s*\\('
          'beginCaptures':
            '1': 'name': 'keyword.control.while.fortran'
          'end': '(?:(\\))|(?=[;!\\n]))'
          'patterns':[
            {'include': '$self'}
          ]
        }
        {'include': '$self'}
      ]
    }
  'if-then-construct':
    {
      'contentName': 'meta.if-then.fortran'
      'begin': '(?i)(?:^|(?<=;))\\s*(if)\\b(?=[^;\\n]*\\bthen)\\b'
      'beginCaptures':
        '1': 'name': 'keyword.control.if.fortran'
      'end': '(?i)(?:^|(?<=;))\\s*(end\\s*if)\\b\\s*(\\S.*)?(?=[;!\\n])'
      'endCaptures':
        '1': 'name': 'keyword.control.endif.fortran'
        '2': 'name': 'invalid.error.fortran'
      'patterns':[
        {'include': '$self'}
      ]
    }
  # intrinsic procedures:
  'intrinsic-functions':
    'comment': 'Intrinsic functions introduced in the Fortran 1977 standard.'
    'begin': '(?ix)\\b([icd]?abs|acos|[ad]int|[ad]nint|aimag|amax[01]|
      amin[01]|d?asin|d?atan|d?atan2|char|conjg|[cd]?cos|d?cosh|cmplx|dble|
      i?dim|dmax1|dmin1|dprod|[cd]?exp|float|ichar|idint|ifix|index|int|len|
      lge|lgt|lle|llt|[acd]?log|[ad]?log10|max[01]?|min[01]?|[ad]?mod|
      (id)?nint|real|[di]?sign|[cd]?sin|d?sinh|sngl|[cd]?sqrt|d?tan|d?tanh)\\s*\\('
    'beginCaptures':
      '1': 'name': 'keyword.other.function.intrinsic.fortran'
    'end': '\\)'
    'patterns':[
      {'include': '#procedure-call-dummy-variable'}
      {'include': '$self'}
    ]
  # statements:
  'IO-statements':
    'comment': 'IO statements introduced in the Fortran 1977 standard.'
    'patterns':[
      {
        'begin': '(?ix)\\b(backspace|close|format|endfile|inquire|open|
          read|rewind|write)\\s*\\('
        'beginCaptures':
          '1': 'name': 'keyword.control.IO.fortran'
        'end': '(\\)|(?=\\n))'
        'patterns':[
          {'include': '#procedure-call-dummy-variable'}
          {'include': '$self'}
        ]
      }
      {
        'comment': 'format and print statement.'
        'match': '(?i)\\b(format|print|read)\\b'
        'name': 'keyword.control.IO.fortran'
      }
    ]
  # other:
  'procedure-call-dummy-variable':
    'name': 'variable.parameter.dummy-variable.fortran'
    'match': '(?i)\\b([a-z]\\w*)(?=\\s*\\=)'
  'dummy-variable-list':
    {
      'begin': '\\G\\s*(\\()'
      'beginCaptures':
        '1': 'name': 'punctuation.definition.parameters.begin.fortran'
      'end': '(\\)|(?=\\n))'
      'endCaptures':
        '0': 'name': 'punctuation.definition.parameters.end.fortran'
      'patterns': [
        {
          'comment': 'dummy variable'
          'match': '(?i)(?:^|(?<=[&,\\(]))\\s*([a-z]\\w*)'
          'captures':
            '1': 'name': 'variable.parameter.fortran'
        }
      ]
    }
'scopeName': 'source.fortran'
